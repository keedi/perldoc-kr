Design Pattern
디자인 패턴
핵심은...
변화!
유사한 문제점에 대한 해결책 또는 대안
서로의 좋은 기법을 참조하고 사용할 방법
훌륭한 프로그래머의 좋은 디자인 형태 배우기

디자인 패턴의 미덕
변화를 대비한 설계 가능
요구사항의 변화에
최소한의 코드 변경

어려운 점
학습한 디자인 패턴을
언제?
어떻게?
사용해야 하는가?
(역시 경험치 필요...)

Singleton
싱글톤
생성 관련 패턴 중 하나

.ul subject="생성 관련 패턴?" effect="seq"
* 싱글톤
* 추상 팩토리
* 팩토리 메소드
* 빌더
* 프로토타입

그래서 싱글톤은?
어디서든 접근이 가능한 단일 인스턴스
오직 하나 뿐인 인스턴스(instance)를 구현
광역적인 접근(global access) 제공

싱글톤이 유용한 곳
.ul subject="이럴 때 싱글톤을 쓰라!" effect="seq"
* thread-pool
* dialog box
* cache
* preference-configuration
* registry-configuration
* logging object
* device-driver

.code src="src/Counter.pm"
.code src="src/counter.pl"
.code
The counters are the same!
Count is now 1
Count is now 2
Count is now 3
The counters are the same!
.code

.code src="src/DBI/Singleton.pm"
.code src="src/using_dbi_singleton.pl"

일일이 싱글톤용 모듈을 만들기가 귀찮다면?
CPAN 모듈!
Class::Singleton
.code src="src/DBI/NeoSingleton.pm"
.code src="src/using_class_singleton.pl"

Class::Singleton 의 내부는?
.code src="/usr/local/share/perl/5.8.8/Class/Singleton.pm"

참조문헌
* Head First Design Patterns, O'REILLY
* The Singleton Design Pattern, brian d foy

