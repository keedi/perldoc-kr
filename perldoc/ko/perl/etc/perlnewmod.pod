=head1 이름

perlnewmod - 새로운 모듈을 배포하기 위해 

=head1 설명

이 문서는 Perl 모듈을 써서, 배포하는 준비를 하고, CPAN을 통해서 
얻을 수 있도록 하기 위한 어드바이스입니다.

Perl 이 실제로 이렇게 강력한 이유의 하나로써는 Perl 해커들이 자신들이 
직면한 문제의 해결법을 공유하려고 하는 것이라고 할 수 있겠죠.
그래서, 모두가 같은 문제에 고민할 필요는 없다는 것입니다.

이것이 실현되는 것은 많은 경우의 솔루션을 추상화해서 
Perl 모듈에 하고 있는 것입니다. 만약 이것이 무엇인지 모르겠다면,
이 문서의 남은 부분은 그다지 도움이 되지 않을 것이고, 지금까지 
많은 편리한 코드를 보고 헤매고 있을 것입니다. L<perlmod>, 
L<perlmodlib>, L<perlmodinstall> 을 잘 읽고 다시 와주세요.

만약, 당신이 해야하는 것에 관한 모듈이 존재지 않고, 자신이 코드를 
쓰지 않으면 안될 때에는 그 솔루션을 모듈에 넣고 CPAN에 업로드하는 것을 
검토해주세요. 그렇게 하면 다른 모든 이에게 이익이 될겁니다.

=head2 경고

여기에서는 주로 Pure Perl 의 모듈에 대해서 설명하고, XS 모듈에 대해서는
건드리지 않습니다. XS 모듈은 일반적으로는 약간 다른 목적으로 이용되기에 
배포할 때에는 별도의 문제에 대해서 고려할 필요가 있습니다. 즉, glue의
대상이 되는 라이브러리의 인기, 다른 OS로의 포터빌리티 등입니다.
그러나 모듈의 준비나 패키징, 배포의 설명은 XS 모둘에도 똑같이 적용될겁니다.

=head2 무엇을 모듈로 하면 좋은가?

다른 사람에게 편리한 것이라면 어떤 코드라도 모듈로 해야합니다.
모두가 사용하고 있는 라이브러리에 부족한 것을 넣고, 거기에 다른 사람이 자신의
프로램에 직접 집어넣는 것이라면 뭐든지 OK입니다. 당신의 코드에 
단독으로 날아서 다른 것에 넣을 것이 있다면 그것은 모듈의 후보가 될 것입니다.

예제를 보겠습니다. 로컬의 포맷에서 데이터를 읽어들여, Perl 의 
해쉬리퍼런스의 해쉬로 해서, 트리 구조로 해서, 트리를 조작해서 
각각의 노드를 Acme Transmogrifier Server 에 파이프한다고 합시다.

그럼 Acme Transmogrifier 를 가지고 있는 사람은 그다지 없을 겁니다.
그렇기에 그 프로토콜을 이야기하는 코드를 스크래치에서 쓰지 않으면 
안되겠죠. 그럴 때, 그것을 모듈로 하고 싶을 겁니다. 어떤 레벨에서 
조작하는 가는 당신이 하기 나름ㅣㅂ니다. L<Net::SMTP> 같은 프로토콜 레벨의
모듈에서 L<Mail::Send> 같은 높은 레벨에서 조작하는 모듈까지. 결정하는 것은
당신입니다만, 서버 프로토콜에 특화한 모듈을 만들고 싶겠죠?

당신의 로컬 데이터 포맷에 흥미가 있는 사람은 없습니다. 그래서 그것은 
무시하겠습니다. 단, 그 안의 데이터는 어떻게 할까요? Perl 변수에서 
트리구조를 만들어서 그것을 트라버스 하는 것은 종종 있는 일입니다.
거기에 만약 그런 모듈을 누군가 쓰지 않았다면, 그 코드를 다시 
모듈화하고 싶을 겁니다.

그럼, 어떤 것을 모듈화하면 좋을까, 조금은 알게 되셨을겁니다.
이제부터 그것을 어떻게 해서 하는 것인지 보도록 하죠.

=head2 Step-by-step: 지면의 정비

코드를 쓰기 시작하기 전에, 해둬야할 것이 몇 개 있습니다.

=over 3

=item 찾아보기

많은 모듈을 보고, 어떤 식으로 쓰여져있는 가 보도록 합시다.
L<Text::Tabs> 는 표준 라이브러리에서 깨끗하게 쓰여져 있어서 매우 심플하기에
이것부터 시작하는 것이 좋을 겁니다. 다음에 L<Time::Zone> 이나 
L<File::Copy> 그것에도 오브젝트 지향의 코드를 사용하려고 한다면, 
C<Mail::*> 중에 몇 개를 봐두는 것도 좋을 겁니다.

そうすれば、モジュールがどのようにレイアウトされ、書かれているか、大体
わかってくるはずです。

=item 新しいものかどうかチェックする

CPAN にはたくさんのモジュールがありますから、あなたがコントリビュート
しようとしているモジュールとそっくりなものがあっても、見過ごしてしまう
かも知れません。モジュールリストや F<by-module> ディレクトリをよくみて、
車輪の再発明をしていないかどうか確認しましょう!

=item 必要性を議論する

あなたはそれを気に入っているでしょう。他のみんなも、それを必要とすると
思っているでしょう。でも、実際にはそんなに需要はないかもしれません。自
分のモジュールがどの程度需要があるのか不安だったら、
C<comp.lang.perl.modules> に投稿してみましょう。それでもだめなら、
C<modules@perl.org> のモジュールメーリングリストに聞いてみましょう。こ
のメーリングリストはクローズドで、待ち時間が長いことに気を付けてくださ
い。レスポンスが返ってくるまでには、しばらく待つ必要があるかもしれませ
ん。

=item 名前を決める

CPAN にふくまれる Perl モジュールには、ネーミング階層があり、それに合
わせる必要があります。これがどのように整理されているかの詳細は、
L<perlmodlib> をみてください。また、CPAN やモジュールリストを見て回っ
て、どんなものか触れてみてください。少なくとも、これだけは覚えておいて
ください: モジュール名は大文字ではじめる (This::That のように), カテゴ
リに適合している、そして、目的を簡潔に説明している。

=item もう一度チェック

そうしている間に、書こうとしているモジュールに似たモジュールを本当に見
過ごしていないか、確認してください。

整理が付いて、そのモジュールは必要とされていて、まだ存在しないと確信し
たら、コードを書きはじめましょう。

=back

=head2 Step-by-step: モジュールを作る

=over 3

=item F<h2xs> からはじめる

L<h2xs>は、もともとは CヘッダファイルをXS モジュールにするためのユーティ
リティだったのですが、ピュア Perl モジュール用のスケルトンをつくるユー
ティリティとしても便利です。もし L<Autoloader> (大きなモジュールを小さ
なルーチンに分割するモジュール) が必要なければ、以下のように実行します:

    h2xs -AX -n Net::Acme

C<-A> は Autoloader を省略し、C<-X> は XS を省略します。C<-n> でモジュー
ルの名前を指定します。

=item Use L<strict> and L<warnings>

モジュールのコードは warning と strict クリーンでなくてはなりません。
どんな状況でそのモジュールが利用されるかわかりませんから。それに、
warning や strict クリーンでないコードなんて、配布したくないでしょう?

=item Use L<Carp>

L<Carp> モジュールを使うと、エラーメッセージを呼び出し側の視点から出力
することが出来ます。そのモジュールではなく、呼び出し側の問題であること
を示せるのです。たとえば、このようにすると:

    warn "No hostname given";

ユーザはこのようなメッセージを見ることになります:

    No hostname given at /usr/local/lib/perl5/site_perl/5.6.0/Net/Acme.pm
    line 123.

これでは、あなたのモジュールが何か間違ったことをしているように見えます。
代わりに、ユーザに責任をなすりつけられるのです。このように出力します:

    No hostname given at bad_code, line 10.

こうするには、L<Carp> をつかって、C<warn> を C<carp> に置き換えます。
もし C<die> する必要があるなら、C<croak> を使いましょう。ただ、本当に
あなたのモジュールの責任によるチェックの場合は、C<warn> や C<die> のま
まにしておきましょう。

=item Use L<Exporter> - かしこく!

C<h2xs> は L<Exporter> の切れ端を提供します。これによって、シンボルや
サブルーチンをモジュールから呼び出し側の名前空間にエクスポートする標準
的な方法がわかるでしょう。たとえば、C<use Net::Acme qw(&frob)> と書け
ば、C<frob> サブルーチンをインポートします。

パッケージ変数の C<@EXPORT> によって、呼び出し側が単純に C<use
Net::Acme> と書いたときに、どのシンボルがエクスポートされるかが決まり
ます。ほとんどの場合は、ここには何もいれくないでしょう。一方、
C<@EXPORT_OK> をつかうと、どの変数をエクスポートしてもよいかを指定でき
ます。たくさんのシンボルをエクスポートしたい場合は、C<%EXPORT_TAGS> を
つかって、エクスポートのセットを定義しましょう。詳しくは L<Exporter> 
を見てください。

=item plain old documentation をつかう

仕事はペーパーワークがすむまでは、終わりではありません。モジュールのド
キュメントを書くための時間が必要です。C<h2xs> を利用すれば、テンプレー
トをつくってくれますので、それを埋めればよいです。フォーマットがよくわ
からなければ、まずは L<perlpod> を見てください。モジュールをどのように
使うかのおおまかな概要、そしてシンタックスの説明や、それぞれのサブルー
チンやメソッドの機能説明を提供してください。開発者のノートとして Perl 
のコメントを利用し、エンドユーザへのノートには POD を使ってください。

=item テストを書く

ぜひユニットテストコードをつくって、あなたのモジュールが、いろんなプラッ
トフォーム上の Perl で、意図した通りにうまく動くことを確認しましょう。
CPAN にモジュールをアップロードすると、たくさんのテスターがモジュール
をビルドして、テストの結果をあなたに送ってくれるでしょう。ここでもまた、
C<h2xs> をつかえば、あとで拡張可能な、テストフレームワークが提供されま
す。単にコンパイルが通るかだけでなく、いろいろとテストしましょう。

=item README を書く

CPAN にアップロードするときは、README ファイルが自動で抽出されて、あな
たの CPAN ディレクトリにおかれます。また、モジュールリストに載った場合
には、F<by-module> や F<by-category> のメインディレクトリにも配置され
ます。このファイルに、そのモジュールのすることの詳細や、一つ前のリリー
スからの変更点を書いておくと良いでしょう。

=back

=head2 Step-by-step: モジュールを配布する

=over 3

=item CPAN ユーザ IDを取得する

CPAN でモジュールを配布するには、CPAN ID が必要です。どうやって取得す
るかは、C<http://www.cpan.org/modules/04pause.html> (もしくはそのミラー) 
の指示を読んでください。

=item C<perl Makefile.PL; make test; make dist>

ここでも、C<h2xs> はすべてやってくれます。モジュールをインストールする
ときによくみる、標準的な C<Makefile.PL> ができています。これが生成する 
Makefile に C<dist> ターゲットがあります。

モジュールがテストにパスしたことを確認したら(いつでも確認することはよ
いことです)、 C<make dist> を実行すれば、Makefile はアップロード準備の
ととのった tarball ファイルを生成してくれます。

=item tarball をアップロードする

CPAN ID を取得できたときに届く email に、PAUSE (the Perl Authors
Upload SErver) へのログイン方法が載っています。メニューから選択して、
モジュールをCPANにアップロードできます。

=item モジュールリストにアナウンスする

アップロードしたら、あなたのディレクトリにあるだけでは人目を引きません。
のこりの CPAN モジュールと同じように載せたければ、モジュールリストにそ
のことを伝えます。一番良い方法は、モジュールリストと同じスタイルで 
Email をこんな感じでかくことです:

  Net::Acme bdpOP   Interface to Acme Frobnicator servers      FOOBAR
  ^         ^^^^^   ^                                          ^
  |         |||||   モジュールの説明                           あなたのID
  |         ||||| 
  |         ||||\-ライセンス: (p)standard Perl, (g)GPL, (b)BSD,
  |         ||||              (l)LGPL, (a)rtistic, (o)ther
  |         ||||
  |         |||\- インタフェース: (O)OP, (r)eferences, (h)ybrid, (f)unctions
  |         |||
  |         ||\-- 言語: (p)ure Perl, C(+)+, (h)ybrid, (C), (o)ther
  |         ||
  Module    |\--- サポート: (d)eveloper, (m)ailing list, (u)senet, (n)one
  Name      |
            \---- 開発状況: (i)dea, (c)onstructions, (a)lpha, (b)eta,
                            (R)eleased, (M)ature, (S)tandard


それに、モジュールの説明と、これがリストに含まれるべき理由を記述します。
何も答えが返って来なければ、次の更新で、モジュールリストに掲載されるで
しょう。C<modules@perl.org> に subscribe しようとしないようにしてくだ
さい。これはメーリングリストではないのです。我慢してください。

=item clpa にアナウンスする

リリースしたことを世界中にアナウンスしたいという野望があるなら、モデレー
トされている、C<comp.lang.perl.announce> ニュースグループにアナウンス
を投稿してみましょう。

=item バグをなおす!

ユーザが集まってくると、バグレポートが送られて来ます。運がよければ、パッ
チを送ってくれるでしょう。ソフトウェアプロジェクトのメンテナンスという
喜びが待っています ...

=back

=head1 AUTHOR

Simon Cozens, C<simon@cpan.org>

=head1 SEE ALSO

L<perlmod>, L<perlmodlib>, L<perlmodinstall>, L<h2xs>, L<strict>,
L<Carp>, L<Exporter>, L<perlpod>, L<Test>, L<ExtUtils::MakeMaker>,
http://www.cpan.org/,  Ken Williams' tutorial on building your own
module at http://mathforum.org/~ken/perl_modules.html
